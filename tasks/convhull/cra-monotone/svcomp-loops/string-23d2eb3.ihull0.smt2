(declare-const j Int)
(declare-const tr Int)
(declare-const tr0 Int)
(declare-const tr1 Int)
(declare-const i Int)
(declare-const tr2 Int)
(declare-const phi_j Int)
(declare-const phi_i Int)
(declare-const term_to_project_onto Real)
(declare-const |i'| Int)
(declare-const nc_B Int)
(declare-const term_to_project_onto0 Real)
(declare-const |j'| Int)
(declare-const nc_A Int)
(assert (and (<= (- j) 0) (<= (- nc_B) 0) (<= (- nc_A) 0)
               (<= (+ i (- nc_A) 1) 0) (<= (+ (- nc_B) j 1) 0)
               (or (and (or (<= (+ (- tr0) tr 1) 0) (<= (+ tr0 (- tr) 1) 0))
                          (= (+ (- phi_i) i (- j) 1) 0) (= (- phi_j) 0))
                     (and (= (+ (- tr2) tr1) 0) (= (+ (- phi_i) i 1) 0)
                            (= (+ (- phi_j) j 1) 0)))
               (= (+ |j'| (- phi_j)) 0) (= (+ |i'| (- phi_i)) 0)
               (= term_to_project_onto0 (+ |i'| (- i)))
               (= term_to_project_onto (+ |j'| (- j)))))
(check-sat)
