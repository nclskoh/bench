(declare-const |return@pos'| Int)
(declare-const type_err Int)
(declare-const return@width Int)
(declare-const x Int)
(declare-const term_to_project_onto2 Real)
(declare-const term_to_project_onto3 Real)
(declare-const type_err2 Int)
(declare-const return@pos Int)
(declare-const phi_return@pos Int)
(declare-const term_to_project_onto0 Real)
(declare-const term_to_project_onto1 Real)
(declare-const return Int)
(declare-const term_to_project_onto Real)
(declare-const phi_return@width Int)
(declare-const havoc Int)
(declare-const |x'| Int)
(declare-const |c'| Int)
(declare-const havoc1 Int)
(declare-const type_err1 Int)
(declare-const |return@width'| Int)
(declare-const havoc0 Int)
(declare-const |return'| Int)
(declare-const phi_return Int)
(declare-const type_err0 Int)
(declare-const c Int)
(assert (and (<= (+ (- x) 1) 0)
               (or (and (= havoc 0) (= (+ (- phi_return) havoc0) 0)
                          (= (+ (- phi_return@pos) type_err) 0)
                          (= (+ (- phi_return@width) type_err0) 0))
                     (and (or (<= (+ havoc 1) 0) (<= (+ (- havoc) 1) 0))
                            (= (+ havoc1 (- phi_return)) 0)
                            (= (+ type_err1 (- phi_return@pos)) 0)
                            (= (+ type_err2 (- phi_return@width)) 0)))
               (= (+ |return@width'| (- phi_return@width)) 0)
               (= (+ |return@pos'| (- phi_return@pos)) 0)
               (= (+ |return'| (- phi_return)) 0) (= (+ |c'| (- havoc)) 0)
               (= (+ |x'| (- x) 1) 0)
               (= term_to_project_onto3 (+ |x'| (- x)))
               (= term_to_project_onto2 (+ |c'| (- c)))
               (= term_to_project_onto1 (+ |return'| (- return)))
               (= term_to_project_onto0 (+ |return@pos'| (- return@pos)))
               (= term_to_project_onto (+ |return@width'| (- return@width)))))
(check-sat)
