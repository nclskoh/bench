(declare-const uninterp0 Int)
(declare-const |counter'| Int)
(declare-const uninterp Int)
(declare-const term_to_project_onto Real)
(declare-const a Int)
(declare-const counter Int)
(declare-const v Int)
(declare-const x Int)
(declare-const y Int)
(declare-const |u'| Int)
(declare-const uninterp1 Int)
(declare-const u Int)
(declare-const term_to_project_onto1 Real)
(declare-const term_to_project_onto2 Real)
(declare-const tmp___0 Int)
(declare-const |tmp___0'| Int)
(declare-const |y'| Int)
(declare-const b Int)
(declare-const term_to_project_onto0 Real)
(assert (and (<= (+ (- x) 1) 0) (<= (+ (- u) 1) 0) (<= (+ (- y) 1) 0)
               (<= (- v) 0) (<= (+ (- counter) 1) 0) (<= (+ (- b) 1) 0)
               (<= (+ (- a) 1) 0) (<= (+ counter -19) 0)
               (= (+ (- uninterp) uninterp0 uninterp1) 0)
               (<= (+ (- y) x 1) 0) (= (+ |tmp___0'| (- counter)) 0)
               (= (+ |u'| (- v) (- u)) 0) (= (+ |y'| (- y) x) 0)
               (= (+ |counter'| (- counter) -1) 0) (<= 1 uninterp1)
               (<= x uninterp1) (<= u uninterp1) (<= 0 uninterp0)
               (<= (* 2 v) uninterp0) (<= 1 uninterp) (<= b uninterp)
               (<= a uninterp) (= 0 (+ (- uninterp) uninterp0 uninterp1))
               (= term_to_project_onto2 (+ |counter'| (- counter)))
               (= term_to_project_onto1 (+ |y'| (- y)))
               (= term_to_project_onto0 (+ |u'| (- u)))
               (= term_to_project_onto (+ |tmp___0'| (- tmp___0)))))
(check-sat)
