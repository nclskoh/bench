(declare-const term_to_project_onto1 Real)
(declare-const term_to_project_onto Real)
(declare-const tr Int)
(declare-const phi_tmp0 Int)
(declare-const term_to_project_onto0 Real)
(declare-const |tmp'| Int)
(declare-const loop_entered Int)
(declare-const index1 Int)
(declare-const phi_tmp Int)
(declare-const tmp Int)
(declare-const |index1'| Int)
(declare-const term_to_project_onto2 Real)
(declare-const index2 Int)
(declare-const |loop_entered'| Int)
(declare-const |index2'| Int)
(declare-const tr0 Int)
(assert (and (<= (- loop_entered) 0) (<= (- index2) 0) (<= (- index1) 0)
               (<= (+ index1 (- index2) 1) 0)
               (or (and (<= (+ index1 -99999) 0)
                          (or (and (<= (+ (- index2) 100000) 0)
                                     (= (- phi_tmp) 0))
                                (and (<= (+ index2 -99999) 0)
                                       (= (+ (- phi_tmp) 1) 0)))
                          (= (+ (- phi_tmp0) phi_tmp) 0))
                     (and (<= (+ (- index1) 100000) 0) (= (- phi_tmp0) 0)))
               (or (<= (+ phi_tmp0 1) 0) (<= (+ (- phi_tmp0) 1) 0))
               (= (+ (- tr0) tr) 0) (= (+ |tmp'| (- phi_tmp0)) 0)
               (= (+ |loop_entered'| -1) 0) (= (+ |index2'| (- index2) 1) 0)
               (= (+ |index1'| (- index1) -1) 0)
               (= term_to_project_onto2 (+ |index1'| (- index1)))
               (= term_to_project_onto1 (+ |index2'| (- index2)))
               (= term_to_project_onto0 (+ |loop_entered'| (- loop_entered)))
               (= term_to_project_onto (+ |tmp'| (- tmp)))))
(check-sat)
