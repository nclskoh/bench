(declare-const i Int)
(declare-const phi_k Int)
(declare-const term_to_project_onto0 Real)
(declare-const term_to_project_onto Real)
(declare-const |v'| Int)
(declare-const phi_k0 Int)
(declare-const n Int)
(declare-const v Int)
(declare-const k Int)
(declare-const |i'| Int)
(declare-const havoc Int)
(declare-const c2 Int)
(declare-const c1 Int)
(declare-const term_to_project_onto1 Real)
(declare-const c3 Int)
(declare-const |k'| Int)
(assert (and (<= (+ (- c1) 1) 0) (<= (+ (- c2) 1) 0) (<= (- k) 0)
               (<= (+ (- c3) 1) 0) (<= (- i) 0) (<= (- n) 0)
               (= (+ (- c3) 10000) 0) (= (+ c3 (* -5 c2)) 0)
               (= (+ (* 2 c2) (- c1)) 0) (<= (+ (- n) i 1) 0)
               (<= (- havoc) 0) (<= (+ n -1) 0)
               (or (and (or (<= (+ havoc 1) 0) (<= (+ (- havoc) 1) 0))
                          (or (and (or (<= havoc 0) (<= (+ (- havoc) 2) 0))
                                     (= (+ (- phi_k) c3 k) 0))
                                (and (= (+ havoc -1) 0)
                                       (= (+ (- phi_k) k c2) 0)))
                          (= (+ (- phi_k0) phi_k) 0))
                     (and (= havoc 0) (= (+ (- phi_k0) k c1) 0)))
               (= (+ |k'| (- phi_k0)) 0) (= (+ |i'| (- i) -1) 0)
               (= (+ |v'| (- havoc)) 0)
               (= term_to_project_onto1 (+ |v'| (- v)))
               (= term_to_project_onto0 (+ |i'| (- i)))
               (= term_to_project_onto (+ |k'| (- k)))))
(check-sat)
