(declare-const tmp___0 Int)
(declare-const uninterp1 Int)
(declare-const term_to_project_onto2 Real)
(declare-const term_to_project_onto1 Real)
(declare-const |x'| Int)
(declare-const term_to_project_onto Real)
(declare-const uninterp Int)
(declare-const uninterp2 Int)
(declare-const counter Int)
(declare-const n Int)
(declare-const |counter'| Int)
(declare-const x Int)
(declare-const |tmp___0'| Int)
(declare-const term_to_project_onto0 Real)
(declare-const uninterp0 Int)
(declare-const |z'| Int)
(declare-const a Int)
(declare-const term_to_project_onto4 Real)
(declare-const |n'| Int)
(declare-const term_to_project_onto3 Real)
(declare-const y Int)
(declare-const z Int)
(declare-const |y'| Int)
(assert (and (<= (- x) 0) (<= (+ (- y) 1) 0) (<= (- n) 0) (<= (+ (- z) 1) 0)
               (= (+ (- z) (* 6 n) 6) 0) (<= (+ counter -4) 0)
               (= (+ z (* -6 n) -6) 0)
               (= (+ (* -3 uninterp) (* -3 n) y -1) 0)
               (= (+ (- uninterp0) x) 0)
               (= (+ (* 2 z) uninterp1 (* -12 y) (* -18 x) -6) 0)
               (= (+ uninterp2 (* -6 z) (* -12 y) 12) 0) (<= (+ (- a) n) 0)
               (= (+ |tmp___0'| (- counter)) 0) (= (+ |z'| (- z) -6) 0)
               (= (+ |y'| (- z) (- y)) 0) (= (+ |x'| (- y) (- x)) 0)
               (= (+ |n'| (- n) -1) 0) (= (+ |counter'| (- counter) -1) 0)
               (<= 36 uninterp2) (<= (* 6 z) uninterp2)
               (<= (* 6 z) uninterp2) (<= 6 uninterp1) (<= (* 6 y) uninterp1)
               (<= z uninterp1) (<= 0 uninterp0) (<= 0 uninterp)
               (= 0 (+ -18 (* 72 uninterp) (* 54 uninterp0) (* -3 uninterp1)
                         uninterp2))
               (= term_to_project_onto4 (+ |counter'| (- counter)))
               (= term_to_project_onto3 (+ |n'| (- n)))
               (= term_to_project_onto2 (+ |x'| (- x)))
               (= term_to_project_onto1 (+ |y'| (- y)))
               (= term_to_project_onto0 (+ |z'| (- z)))
               (= term_to_project_onto (+ |tmp___0'| (- tmp___0)))))
(check-sat)
