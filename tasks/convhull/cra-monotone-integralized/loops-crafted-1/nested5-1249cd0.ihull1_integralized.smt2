(declare-const |v'0| Int)
(declare-const v Int)
(declare-const z Int)
(declare-const |v'| Int)
(declare-const term_to_project_onto_integralized Int)
(declare-const term_to_project_onto0_integralized Int)
(declare-const |z'| Int)
(declare-const K Int)
(assert (exists ((remainder?1 Int) (quotient?2 Int))
         (and (<= (- v) 0) (<= (- z) 0) (<= (+ z -9) 0) (= (+ (- |v'0|) K) 0)
                (or (and (= K 0) (= (- |v'0|) 0))
                      (and (<= (+ (- K) 1) 0) (<= (+ |v'0| -10) 0)
                             (<= (+ (- |v'0|) 1) 0))) (<= (- K) 0)
                (<= (- |v'0|) 0) (<= (+ (- |v'0|) 10) 0)
                (or (<= (+ (ite (and (<= (- |v'0|) 0) (<= (- |v'0|) 0))
                                remainder?1 (+ remainder?1 -4)) 1) 0)
                      (<= (+ (- (ite (and (<= (- |v'0|) 0) (<= (- |v'0|) 0))
                                     remainder?1 (+ remainder?1 -4))) 1) 0))
                (= (+ |v'| (- |v'0|)) 0) (= (+ |z'| (- z) -1) 0)
                (= (+ term_to_project_onto0_integralized (- (+ |z'| (- z)))) 0)
                (= (+ term_to_project_onto_integralized (- (+ |v'| (- v)))) 0)
                (= |v'0| (+ (* 4 quotient?2) remainder?1)) (<= 0 remainder?1)
                (or (<= remainder?1 (+ 4 -1)) (<= remainder?1 (+ -4 -1))))))
(check-sat)