(declare-const K Int)
(declare-const space Int)
(declare-const |right'0| Int)
(declare-const |space'| Int)
(declare-const right Int)
(declare-const term_to_project_onto0_integralized Int)
(declare-const term_to_project_onto_integralized Int)
(declare-const |right'| Int)
(declare-const n Int)
(assert (exists ((remainder?1 Int) (quotient?2 Int))
         (and (<= (+ (- space) 1) 0)
                (<= (+ (- |right'0|) (* 2 K) (* 2 space) -1) 0)
                (or (and (= K 0) (= (+ (- |right'0|) (* 2 space) -1) 0))
                      (and (<= (+ (- K) 1) 0) (<= (+ (- space) 1) 0)
                             (<= (+ (- space) 1) 0)
                             (<= (+ (- n) (* 2 space)) 0)
                             (<= (+ (- |right'0|) (* 2 space) 1) 0)
                             (<= (+ (- space) 1) 0)
                             (<= (+ (- n) |right'0| (* -2 space) 1) 0)))
                (<= (- K) 0) (<= (+ (- |right'0|) 1) 0)
                (<= (+ (- space) 1) 0) (<= (+ n (- |right'0|)) 0)
                (= (+ (ite (and (<= (- space) 0) (<= (- space) 0))
                           remainder?1 (+ remainder?1 -2)) (* 2 |space'|)
                        (- space)) 0) (= (+ |right'| (- |right'0|)) 0)
                (= (+ term_to_project_onto0_integralized
                        (- (+ |right'| (- right)))) 0)
                (= (+ term_to_project_onto_integralized
                        (- (+ |space'| (- space)))) 0)
                (= space (+ (* 2 quotient?2) remainder?1)) (<= 0 remainder?1)
                (or (<= remainder?1 (+ 2 -1)) (<= remainder?1 (+ -2 -1))))))
(check-sat)