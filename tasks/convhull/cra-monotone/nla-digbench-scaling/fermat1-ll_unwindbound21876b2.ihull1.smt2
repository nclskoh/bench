(declare-const term_to_project_onto Real)
(declare-const uninterp Int)
(declare-const uninterp0 Int)
(declare-const term_to_project_onto1 Real)
(declare-const counter Int)
(declare-const r Int)
(declare-const tmp Int)
(declare-const v Int)
(declare-const |v'| Int)
(declare-const term_to_project_onto0 Real)
(declare-const u Int)
(declare-const |tmp'| Int)
(declare-const |r'| Int)
(declare-const A Int)
(declare-const term_to_project_onto2 Real)
(declare-const |counter'| Int)
(assert (and (<= (+ (- v) 1) 0) (<= (+ (- counter) 1) 0) (<= (+ (- A) 1) 0)
               (<= (+ counter -1) 0)
               (= (+ (- uninterp) (* 2 u) (* 4 r) (* 4 A) uninterp0 (* -2 v)) 0)
               (<= (+ (- r) 1) 0) (= (+ |tmp'| (- counter)) 0)
               (= (+ |r'| (- r) v) 0) (= (+ |v'| (- v) -2) 0)
               (= (+ |counter'| (- counter) -1) 0) (<= 1 uninterp0)
               (<= v uninterp0) (<= v uninterp0)
               (= term_to_project_onto2 (+ |counter'| (- counter)))
               (= term_to_project_onto1 (+ |v'| (- v)))
               (= term_to_project_onto0 (+ |r'| (- r)))
               (= term_to_project_onto (+ |tmp'| (- tmp)))))
(check-sat)
