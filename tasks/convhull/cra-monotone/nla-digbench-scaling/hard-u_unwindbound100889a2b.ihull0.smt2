(declare-const |p'| Int)
(declare-const term_to_project_onto0 Real)
(declare-const term_to_project_onto Real)
(declare-const |counter'| Int)
(declare-const |tmp'| Int)
(declare-const A Int)
(declare-const counter Int)
(declare-const q Int)
(declare-const uninterp Int)
(declare-const |d'| Int)
(declare-const p Int)
(declare-const r Int)
(declare-const term_to_project_onto2 Real)
(declare-const d Int)
(declare-const term_to_project_onto1 Real)
(declare-const tmp Int)
(declare-const B Int)
(assert (and (<= (+ (- p) 1) 0) (<= (+ (- d) 1) 0) (<= (- r) 0) (= q 0)
               (<= (- counter) 0) (<= (+ (- B) 1) 0) (<= (- A) 0)
               (= (+ A (- r)) 0) (= q 0) (<= (+ counter -99) 0) (= q 0)
               (= (+ (- A) r) 0) (= (+ d (- uninterp)) 0) (<= (+ (- r) d) 0)
               (= (+ |tmp'| (- counter)) 0) (= (+ |p'| (* -2 p)) 0)
               (= (+ |d'| (* -2 d)) 0) (= (+ |counter'| (- counter) -1) 0)
               (<= 1 uninterp) (<= p uninterp) (<= B uninterp)
               (= term_to_project_onto2 (+ |counter'| (- counter)))
               (= term_to_project_onto1 (+ |d'| (- d)))
               (= term_to_project_onto0 (+ |p'| (- p)))
               (= term_to_project_onto (+ |tmp'| (- tmp)))))
(check-sat)
