(declare-const y Int)
(declare-const |counter'| Int)
(declare-const x Int)
(declare-const u Int)
(declare-const counter Int)
(declare-const tmp Int)
(declare-const a Int)
(declare-const term_to_project_onto_integralized Int)
(declare-const uninterp1 Int)
(declare-const term_to_project_onto1_integralized Int)
(declare-const uninterp Int)
(declare-const term_to_project_onto2_integralized Int)
(declare-const uninterp0 Int)
(declare-const |v'| Int)
(declare-const |x'| Int)
(declare-const |tmp'| Int)
(declare-const b Int)
(declare-const term_to_project_onto0_integralized Int)
(declare-const v Int)
(assert (and (<= (+ (- x) 1) 0) (<= (+ (- u) 1) 0) (<= (+ (- y) 1) 0)
               (<= (- v) 0) (<= (+ (- counter) 1) 0) (<= (+ (- b) 1) 0)
               (<= (+ (- a) 1) 0) (<= (+ counter -19) 0)
               (= (+ (- uninterp) uninterp0 uninterp1) 0)
               (<= (+ y (- x) 1) 0) (= (+ |tmp'| (- counter)) 0)
               (= (+ |v'| (- v) (- u)) 0) (= (+ |x'| y (- x)) 0)
               (= (+ |counter'| (- counter) -1) 0) (<= (+ 2 (- uninterp1)) 0)
               (<= (+ x (- uninterp1)) 0) (<= (+ (* 2 u) (- uninterp1)) 0)
               (<= (- uninterp0) 0) (<= (+ v (- uninterp0)) 0)
               (<= (+ 1 (- uninterp)) 0) (<= (+ b (- uninterp)) 0)
               (<= (+ a (- uninterp)) 0)
               (= (- (+ (- uninterp) uninterp0 uninterp1)) 0)
               (= (+ term_to_project_onto2_integralized
                       (- (+ |counter'| (- counter)))) 0)
               (= (+ term_to_project_onto1_integralized (- (+ |x'| (- x)))) 0)
               (= (+ term_to_project_onto0_integralized (- (+ |v'| (- v)))) 0)
               (= (+ term_to_project_onto_integralized (- (+ |tmp'| (- tmp)))) 0)))
(check-sat)