(declare-const counter Int)
(declare-const uninterp0 Int)
(declare-const term_to_project_onto3 Real)
(declare-const y Int)
(declare-const |c'| Int)
(declare-const term_to_project_onto1 Real)
(declare-const x Int)
(declare-const |tmp'| Int)
(declare-const uninterp Int)
(declare-const |x'| Int)
(declare-const |y'| Int)
(declare-const |counter'| Int)
(declare-const k Int)
(declare-const term_to_project_onto Real)
(declare-const c Int)
(declare-const term_to_project_onto0 Real)
(declare-const term_to_project_onto2 Real)
(declare-const tmp Int)
(assert (and (<= (+ (- c) 1) 0) (<= (- counter) 0) (= (+ counter (- c) 1) 0)
               (= (+ (- x) y counter) 0) (<= counter 0)
               (= (+ uninterp (- x) (- uninterp0) 1) 0) (<= (+ (- k) c 1) 0)
               (= (+ |tmp'| (- counter)) 0) (= (+ |c'| (- c) -1) 0)
               (= (+ |y'| (- uninterp0)) 0) (= (+ |x'| (- uninterp) -1) 0)
               (= (+ |counter'| (- counter) -1) 0)
               (= 0 (+ (- uninterp) uninterp0))
               (= term_to_project_onto3 (+ |counter'| (- counter)))
               (= term_to_project_onto2 (+ |x'| (- x)))
               (= term_to_project_onto1 (+ |y'| (- y)))
               (= term_to_project_onto0 (+ |c'| (- c)))
               (= term_to_project_onto (+ |tmp'| (- tmp)))))
(check-sat)
