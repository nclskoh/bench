(declare-const z Int)
(declare-const y Int)
(declare-const b Int)
(declare-const uninterp0 Int)
(declare-const phi_y Int)
(declare-const term_to_project_onto_integralized Int)
(declare-const |z'| Int)
(declare-const term_to_project_onto1_integralized Int)
(declare-const phi_z Int)
(declare-const x Int)
(declare-const |x'| Int)
(declare-const a Int)
(declare-const |y'| Int)
(declare-const rem Int)
(declare-const term_to_project_onto0_integralized Int)
(declare-const uninterp Int)
(assert (exists
         ((standardize_int?1 Int) (standardize_int?2 Int) (remainder?3 Int)
            (quotient?4 Int))
         (and (<= (- y) 0) (<= (+ (- b) 1) 0)
                (= (+ z (- uninterp) uninterp0) 0)
                (or (<= (+ y 1) 0) (<= (+ (- y) 1) 0))
                (or (and (or (<= y 0)
                               (and (<= (- rem) 0)
                                      (or (<= rem 0) (<= (+ (- rem) 2) 0))
                                      (or (<= (+ rem -1) 0) (<= (+ rem 1) 0))
                                      (= standardize_int?1 (* (/ 1 2)
                                                                (+ y (- rem))))))
                           (= (+ (- phi_y) y) 0) (= (+ (- phi_z) z) 0))
                      (and (= standardize_int?2 (* (/ 1 2) (+ y -1)))
                             (<= (- y) 0) (= (+ (- phi_y) y -1) 0)
                             (= (+ (- phi_z) x z) 0)))
                (= (+ |z'| (- phi_z)) 0)
                (= (+ (ite (and (<= (- phi_y) 0) (<= (- phi_y) 0))
                           remainder?3 (+ remainder?3 -2)) (* 2 |y'|)
                        (- phi_y)) 0) (= (+ |x'| (* -2 x)) 0)
                (<= (+ x (- uninterp0)) 0) (<= (+ a (- uninterp)) 0)
                (= (+ term_to_project_onto1_integralized (- (+ |x'| (- x)))) 0)
                (= (+ term_to_project_onto0_integralized (- (+ |y'| (- y)))) 0)
                (= (+ term_to_project_onto_integralized (- (+ |z'| (- z)))) 0)
                (= phi_y (+ (* 2 quotient?4) remainder?3)) (<= 0 remainder?3)
                (or (<= remainder?3 (+ 2 -1)) (<= remainder?3 (+ -2 -1))))))
(check-sat)