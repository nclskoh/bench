(declare-const K Int)
(declare-const i Int)
(declare-const |i'0| Int)
(declare-const |j'| Int)
(declare-const j Int)
(declare-const term_to_project_onto0_integralized Int)
(declare-const term_to_project_onto_integralized Int)
(declare-const |i'| Int)
(declare-const |j'0| Int)
(assert (exists ((remainder?1 Int) (quotient?2 Int))
         (and (<= (- i) 0) (<= (+ i -3) 0) (= (+ (- |i'0|) K i) 0)
                (= (+ (- |j'0|) (* 2 K)) 0)
                (or (and (= K 0) (= (- |j'0|) 0) (= (+ (- |i'0|) i) 0))
                      (and (<= (+ (- K) 1) 0) (<= (+ i -3) 0) (<= (- i) 0)
                             (<= (+ (- |j'0|) (* 2 |i'0|) -6) 0)
                             (<= (+ |j'0| -4) 0) (<= (+ (- |j'0|) 2) 0)
                             (<= (+ |j'0| (* -2 |i'0|)) 0))) (<= (- K) 0)
                (<= (- |j'0|) 0) (<= (- |i'0|) 0) (<= (+ (- |j'0|) 3) 0)
                (<= (- |j'0|) 0) (<= (+ |j'0| (* -2 |i'0|)) 0)
                (<= (+ (- |j'0|) (* 2 |i'0|) -6) 0) (<= (+ |j'0| -4) 0)
                (= (+ |j'| (- |j'0|)) 0)
                (= (+ -2
                        (- (ite (and (<= (- |j'0|) 0) (<= (- |j'0|) 0))
                                remainder?1 (+ remainder?1 -2))) (* 2 |i'|)
                        |j'0| (- (* 2 |i'0|))) 0)
                (= (+ term_to_project_onto0_integralized (- (+ |i'| (- i)))) 0)
                (= (+ term_to_project_onto_integralized (- (+ |j'| (- j)))) 0)
                (= |j'0| (+ (* 2 quotient?2) remainder?1)) (<= 0 remainder?1)
                (or (<= remainder?1 (+ 2 -1)) (<= remainder?1 (+ -2 -1))))))
(check-sat)