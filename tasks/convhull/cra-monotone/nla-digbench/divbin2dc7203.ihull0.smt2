(declare-const B Int)
(declare-const |r'| Int)
(declare-const A Int)
(declare-const b Int)
(declare-const term_to_project_onto0 Real)
(declare-const term_to_project_onto1 Real)
(declare-const uninterp Int)
(declare-const term_to_project_onto Real)
(declare-const phi_q Int)
(declare-const phi_r Int)
(declare-const |b'| Int)
(declare-const |q'| Int)
(declare-const q Int)
(declare-const r Int)
(assert (and (<= (- q) 0) (<= (+ (- b) 1) 0) (<= (- r) 0) (<= (+ (- B) 1) 0)
               (<= (- A) 0) (= (+ (- B) 1) 0) (= (+ A (- r) (- uninterp)) 0)
               (or (<= (+ (- B) b 1) 0) (<= (+ B (- b) 1) 0))
               (or (and (<= (+ 2
                                 (ite (and (<= (- b) 0) (<= 0 b)) (mod 
                                      b 2) (+ (mod b 2) -2)) (* 2 r) (- 
                                 b)) 0) (= (+ (- phi_q) (* 2 q)) 0)
                          (= (+ (- phi_r) r) 0))
                     (and (<= (+ (- (ite (and (<= (- b) 0) (<= 0 b))
                                         (mod b 2) (+ (mod b 2) -2)))
                                   (- (* 2 r)) b) 0)
                            (= (+ (- phi_q) (* 2 q) 1) 0)
                            (= (+ (- (* 2 phi_r))
                                    (ite (and (<= (- b) 0) (<= 0 b))
                                         (mod b 2) (+ (mod b 2) -2)) (* 
                                    2 r) (- b)) 0)))
               (= (+ (* 2 |b'|)
                       (ite (and (<= (- b) 0) (<= 0 b)) (mod b 2)
                            (+ (mod b 2) -2)) (- b)) 0)
               (= (+ |r'| (- phi_r)) 0) (= (+ |q'| (- phi_q)) 0)
               (<= 0 uninterp) (<= (* 2 q) uninterp)
               (= term_to_project_onto1 (+ |q'| (- q)))
               (= term_to_project_onto0 (+ |r'| (- r)))
               (= term_to_project_onto (+ |b'| (- b)))))
(check-sat)
