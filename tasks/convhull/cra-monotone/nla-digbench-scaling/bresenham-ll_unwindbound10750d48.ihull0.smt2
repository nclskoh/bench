(declare-const X Int)
(declare-const uninterp Int)
(declare-const |tmp'| Int)
(declare-const term_to_project_onto2 Real)
(declare-const term_to_project_onto1 Real)
(declare-const phi_v Int)
(declare-const term_to_project_onto Real)
(declare-const uninterp0 Int)
(declare-const counter Int)
(declare-const x Int)
(declare-const |xy'| Int)
(declare-const |y'| Int)
(declare-const term_to_project_onto0 Real)
(declare-const xy Int)
(declare-const |x'| Int)
(declare-const y Int)
(declare-const term_to_project_onto4 Real)
(declare-const v Int)
(declare-const phi_y Int)
(declare-const term_to_project_onto5 Real)
(declare-const |yx'| Int)
(declare-const yx Int)
(declare-const term_to_project_onto3 Real)
(declare-const tmp Int)
(declare-const Y Int)
(declare-const |counter'| Int)
(declare-const |v'| Int)
(assert (and (<= (- y) 0) (<= (- x) 0) (<= (- counter) 0)
               (= (+ counter (- x)) 0) (<= (+ counter -9) 0)
               (= (+ (- v) (- X) (* 2 Y) (* 2 uninterp) (* -2 uninterp0)) 0)
               (<= (+ (- X) x) 0)
               (or (and (<= (- v) 0) (= (+ (- phi_y) y 1) 0)
                          (= (+ (- phi_v) v (* -2 X) (* 2 Y)) 0))
                     (and (<= (+ v 1) 0) (= (+ (- phi_y) y) 0)
                            (= (+ (- phi_v) v (* 2 Y)) 0)))
               (= (+ |tmp'| (- counter)) 0) (= (+ |yx'| (- uninterp)) 0)
               (= (+ |xy'| (- uninterp0)) 0) (= (+ |v'| (- phi_v)) 0)
               (= (+ |y'| (- phi_y)) 0) (= (+ |x'| (- x) -1) 0)
               (= (+ |counter'| (- counter) -1) 0) (<= 0 uninterp0)
               (<= uninterp (* 9 Y))
               (= term_to_project_onto5 (+ |counter'| (- counter)))
               (= term_to_project_onto4 (+ |x'| (- x)))
               (= term_to_project_onto3 (+ |y'| (- y)))
               (= term_to_project_onto2 (+ |v'| (- v)))
               (= term_to_project_onto1 (+ |xy'| (- xy)))
               (= term_to_project_onto0 (+ |yx'| (- yx)))
               (= term_to_project_onto (+ |tmp'| (- tmp)))))
(check-sat)
