(declare-const x1 Int)
(declare-const term_to_project_onto1 Real)
(declare-const |y2'| Int)
(declare-const term_to_project_onto2 Real)
(declare-const counter Int)
(declare-const |counter'| Int)
(declare-const y3 Int)
(declare-const term_to_project_onto Real)
(declare-const term_to_project_onto3 Real)
(declare-const |tmp'| Int)
(declare-const y2 Int)
(declare-const phi_y1 Int)
(declare-const y1 Int)
(declare-const phi_y2 Int)
(declare-const |y1'| Int)
(declare-const term_to_project_onto0 Real)
(declare-const tmp Int)
(declare-const x2 Int)
(declare-const |y3'| Int)
(declare-const uninterp Int)
(assert (and (<= (- y1) 0) (<= (- y2) 0) (<= (- y3) 0) (<= (- counter) 0)
               (<= (- x1) 0) (= (+ x1 (- counter) (- y3)) 0)
               (<= (+ counter -4) 0) (= (+ (- x1) y3 y2 uninterp) 0)
               (or (<= (+ y3 1) 0) (<= (+ (- y3) 1) 0))
               (or (and (or (<= (+ (- x2) y2 2) 0) (<= (+ x2 (- y2)) 0))
                          (= (+ (- phi_y1) y1) 0) (= (+ (- phi_y2) y2 1) 0))
                     (and (= (+ (- x2) y2 1) 0) (= (+ (- phi_y1) y1 1) 0)
                            (= (- phi_y2) 0))) (= (+ |tmp'| (- counter)) 0)
               (= (+ |y3'| (- y3) 1) 0) (= (+ |y2'| (- phi_y2)) 0)
               (= (+ |y1'| (- phi_y1)) 0) (= (+ |counter'| (- counter) -1) 0)
               (= term_to_project_onto3 (+ |counter'| (- counter)))
               (= term_to_project_onto2 (+ |y1'| (- y1)))
               (= term_to_project_onto1 (+ |y2'| (- y2)))
               (= term_to_project_onto0 (+ |y3'| (- y3)))
               (= term_to_project_onto (+ |tmp'| (- tmp)))))
(check-sat)
