(declare-const A Int)
(declare-const |u'| Int)
(declare-const term_to_project_onto_integralized Int)
(declare-const v Int)
(declare-const counter Int)
(declare-const u Int)
(declare-const uninterp0 Int)
(declare-const term_to_project_onto0_integralized Int)
(declare-const term_to_project_onto2_integralized Int)
(declare-const phi_r Int)
(declare-const term_to_project_onto1_integralized Int)
(declare-const tmp Int)
(declare-const phi_u Int)
(declare-const phi_v Int)
(declare-const |r'| Int)
(declare-const |v'| Int)
(declare-const |counter'| Int)
(declare-const |tmp'| Int)
(declare-const r Int)
(declare-const term_to_project_onto3_integralized Int)
(declare-const uninterp Int)
(assert (and (<= (+ (- v) 1) 0) (<= (- counter) 0) (<= (+ (- A) 1) 0)
               (<= (+ counter -49) 0)
               (= (+ (- uninterp) (* 2 u) (* 4 r) (* 4 A) uninterp0 (* -2 v)) 0)
               (or (<= (+ r 1) 0) (<= (+ (- r) 1) 0))
               (or (and (<= r 0) (= (+ (- phi_u) u 2) 0)
                          (= (+ (- phi_v) v) 0) (= (+ (- phi_r) u r) 0))
                     (and (<= (+ (- r) 1) 0) (= (+ (- phi_u) u) 0)
                            (= (+ (- phi_v) v 2) 0)
                            (= (+ (- phi_r) r (- v)) 0)))
               (= (+ |tmp'| (- counter)) 0) (= (+ |r'| (- phi_r)) 0)
               (= (+ |v'| (- phi_v)) 0) (= (+ |u'| (- phi_u)) 0)
               (= (+ |counter'| (- counter) -1) 0) (<= (+ 1 (- uninterp0)) 0)
               (<= (+ v (- uninterp0)) 0) (<= (+ v (- uninterp0)) 0)
               (= (+ term_to_project_onto3_integralized
                       (- (+ |counter'| (- counter)))) 0)
               (= (+ term_to_project_onto2_integralized (- (+ |u'| (- u)))) 0)
               (= (+ term_to_project_onto1_integralized (- (+ |v'| (- v)))) 0)
               (= (+ term_to_project_onto0_integralized (- (+ |r'| (- r)))) 0)
               (= (+ term_to_project_onto_integralized (- (+ |tmp'| (- tmp)))) 0)))
(check-sat)