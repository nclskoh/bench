(declare-const term_to_project_onto0 Real)
(declare-const n Int)
(declare-const j Int)
(declare-const |k'| Int)
(declare-const |j'| Int)
(declare-const term_to_project_onto1 Real)
(declare-const rem Int)
(declare-const |i'| Int)
(declare-const phi_j Int)
(declare-const term_to_project_onto Real)
(declare-const phi_k Int)
(declare-const i Int)
(declare-const k Int)
(assert (and (<= (- i) 0) (<= (- j) 0) (<= (- k) 0) (<= (- n) 0)
               (= (+ k j (- i)) 0) (<= (+ (- n) i 1) 0)
               (or (and (is_int (/ (+ i 3) 2)) (<= (+ (- i) -3) 0)
                          (= (+ (- phi_k) k 3) 0) (= (+ (- phi_j) j) 0))
                     (and (or (<= (+ i 3) 0)
                                (and (<= (- rem) 0)
                                       (or (<= (+ rem 1) 0)
                                             (<= (+ (- rem) 1) 0))
                                       (or (<= (+ rem -1) 0) (<= (+ rem 1) 0))
                                       (is_int (/ (+ (+ i 3) (- rem)) 2))))
                            (= (+ (- phi_k) k) 0) (= (+ (- phi_j) j 3) 0)))
               (or (<= n 0)
                     (and (<= (+ (- n) 1) 0)
                            (<= (+ (- (ite (and (<= (+ (- i) -3) 0)
                                                  (<= 0 (+ i 3)))
                                           (mod (+ i 3) 2)
                                           (+ (mod (+ i 3) 2) -2)))
                                     (- (* 2 phi_j)) i 3) 0)))
               (= (+ |j'| (- phi_j)) 0) (= (+ |k'| (- phi_k)) 0)
               (= (+ |i'| (- i) -3) 0)
               (= term_to_project_onto1 (+ |i'| (- i)))
               (= term_to_project_onto0 (+ |k'| (- k)))
               (= term_to_project_onto (+ |j'| (- j)))))
(check-sat)
