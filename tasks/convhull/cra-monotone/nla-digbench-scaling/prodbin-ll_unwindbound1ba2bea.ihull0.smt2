(declare-const b Int)
(declare-const term_to_project_onto1 Real)
(declare-const phi_z Int)
(declare-const |tmp'| Int)
(declare-const rem Int)
(declare-const term_to_project_onto2 Real)
(declare-const counter Int)
(declare-const |y'| Int)
(declare-const y Int)
(declare-const phi_y Int)
(declare-const term_to_project_onto Real)
(declare-const uninterp Int)
(declare-const term_to_project_onto3 Real)
(declare-const x Int)
(declare-const |counter'| Int)
(declare-const z Int)
(declare-const |x'| Int)
(declare-const |z'| Int)
(declare-const term_to_project_onto0 Real)
(declare-const tmp Int)
(declare-const a Int)
(declare-const uninterp0 Int)
(assert (and (<= (- y) 0) (<= (- counter) 0) (<= (+ (- b) 1) 0)
               (<= counter 0) (= (+ z (- uninterp) uninterp0) 0)
               (or (<= (+ y 1) 0) (<= (+ (- y) 1) 0))
               (or (and (or (<= y 0)
                              (and (<= (- rem) 0)
                                     (or (<= rem 0) (<= (+ (- rem) 2) 0))
                                     (or (<= (+ rem -1) 0) (<= (+ rem 1) 0))
                                     (is_int (* (/ 1 2) (+ y (- rem))))))
                          (= (+ (- phi_y) y) 0) (= (+ (- phi_z) z) 0))
                     (and (is_int (* (/ 1 2) (+ y -1))) (<= (- y) 0)
                            (= (+ (- phi_y) y -1) 0) (= (+ (- phi_z) x z) 0)))
               (= (+ |tmp'| (- counter)) 0) (= (+ |z'| (- phi_z)) 0)
               (= (+ (ite (and (<= (- phi_y) 0) (<= 0 phi_y)) (mod phi_y 2)
                          (+ (mod phi_y 2) -2)) (* 2 |y'|) (- phi_y)) 0)
               (= (+ |x'| (* -2 x)) 0) (= (+ |counter'| (- counter) -1) 0)
               (<= x uninterp0) (<= a uninterp)
               (= term_to_project_onto3 (+ |counter'| (- counter)))
               (= term_to_project_onto2 (+ |x'| (- x)))
               (= term_to_project_onto1 (+ |y'| (- y)))
               (= term_to_project_onto0 (+ |z'| (- z)))
               (= term_to_project_onto (+ |tmp'| (- tmp)))))
(check-sat)
