(declare-const r Int)
(declare-const uninterp Int)
(declare-const uninterp0 Int)
(declare-const uninterp6 Int)
(declare-const x Int)
(declare-const y Int)
(declare-const uninterp4 Int)
(declare-const xy Int)
(declare-const uninterp1 Int)
(declare-const uninterp2 Int)
(declare-const q Int)
(declare-const a Int)
(declare-const yy Int)
(declare-const term_to_project_onto0 Real)
(declare-const uninterp3 Int)
(declare-const uninterp5 Int)
(declare-const b Int)
(declare-const k Int)
(declare-const |k'| Int)
(declare-const p Int)
(declare-const s Int)
(declare-const |c'| Int)
(declare-const term_to_project_onto Real)
(declare-const c Int)
(assert (and (<= (- k) 0) (<= (- c) 0) (<= (+ (- a) 1) 0) (<= (+ (- b) 1) 0)
               (<= (+ (- y) 1) 0) (<= (+ (- x) 1) 0) (= (+ (- x) 1) 0)
               (= (+ x (- y)) 0) (= (+ y (- b)) 0) (= (+ (- yy) xy) 0)
               (= (+ b (- a)) 0) (= (+ a (- c) (- k)) 0)
               (= (+ a (- c) (- uninterp)) 0)
               (= (+ (- uninterp0) (- uninterp1) a) 0)
               (= (+ (- uninterp2) (- uninterp3) b) 0)
               (= (+ uninterp4 uninterp5 (- uninterp2) (- uninterp3)
                       (- uninterp6) b) 0) (<= (+ b (- c)) 0)
               (= (+ |k'| (- k) -1) 0) (= (+ |c'| b (- c)) 0)
               (<= 1 uninterp6) (<= b uninterp6) (<= y uninterp6)
               (<= uninterp6 1) (<= uninterp6 b) (<= uninterp6 y)
               (<= s uninterp3) (<= uninterp3 s) (<= q uninterp2)
               (<= uninterp2 q) (<= r uninterp1) (<= uninterp1 r)
               (<= p uninterp0) (<= uninterp0 p) (<= 0 uninterp)
               (<= k uninterp) (<= uninterp 0) (<= uninterp k) (= 0 uninterp)
               (= 0 (+ -1 uninterp0 uninterp1))
               (= 0 (+ -1 uninterp2 uninterp3))
               (= 0 (+ (- uninterp4) (- uninterp5) uninterp6))
               (= term_to_project_onto0 (+ |c'| (- c)))
               (= term_to_project_onto (+ |k'| (- k)))))
(check-sat)
