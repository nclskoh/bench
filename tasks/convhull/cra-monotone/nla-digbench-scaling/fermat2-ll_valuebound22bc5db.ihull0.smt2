(declare-const term_to_project_onto0 Real)
(declare-const |v'| Int)
(declare-const term_to_project_onto1 Real)
(declare-const A Int)
(declare-const phi_r Int)
(declare-const r Int)
(declare-const uninterp0 Int)
(declare-const v Int)
(declare-const phi_u Int)
(declare-const u Int)
(declare-const phi_v Int)
(declare-const |u'| Int)
(declare-const term_to_project_onto Real)
(declare-const |r'| Int)
(declare-const uninterp Int)
(assert (and (<= (+ (- u) 1) 0) (<= (+ (- v) 1) 0) (<= (+ (- A) 1) 0)
               (= (+ (- A) 1) 0)
               (= (+ (* 4 r) (* 4 A) uninterp (* -2 v) (- uninterp0) (* 2 u)) 0)
               (or (<= (+ r 1) 0) (<= (+ (- r) 1) 0))
               (or (and (<= r 0) (= (+ (- phi_u) u 2) 0)
                          (= (+ (- phi_v) v) 0) (= (+ (- phi_r) r u) 0))
                     (and (<= (+ (- r) 1) 0) (= (+ (- phi_u) u) 0)
                            (= (+ (- phi_v) v 2) 0)
                            (= (+ (- phi_r) r (- v)) 0)))
               (= (+ |r'| (- phi_r)) 0) (= (+ |v'| (- phi_v)) 0)
               (= (+ |u'| (- phi_u)) 0) (<= 1 uninterp0) (<= u uninterp0)
               (<= u uninterp0) (<= 1 uninterp) (<= v uninterp)
               (<= v uninterp) (= term_to_project_onto1 (+ |u'| (- u)))
               (= term_to_project_onto0 (+ |v'| (- v)))
               (= term_to_project_onto (+ |r'| (- r)))))
(check-sat)
